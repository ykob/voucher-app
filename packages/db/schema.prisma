generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Estimate {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  version   Int            @default(1)
  userId    String         @unique
  user      User           @relation(fields: [userId], references: [id])
  title     String
  issueDate DateTime
  expires   DateTime
  subtotal  Float
  taxAmount Float
  total     Float
  lines     EstimateLine[]
  client    Client         @relation(fields: [clientId], references: [id])
  clientId  String
  staff     ClientStaff[]
  staffId   String
}

model EstimateLine {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  version    Int      @default(1)
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  title      String
  unitPrice  Float
  unit       String
  subtotal   Float
  taxAmount  Float
  estimate   Estimate @relation(fields: [estimateId], references: [id])
  estimateId String
}

model Invoice {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  version     Int           @default(1)
  userId      String        @unique
  user        User          @relation(fields: [userId], references: [id])
  title       String
  issueDate   DateTime
  dueDate     DateTime
  subtotal    Float
  taxAmount   Float
  total       Float
  bankAccount String
  lines       InvoiceLine[]
  client      Client        @relation(fields: [clientId], references: [id])
  clientId    String
  staff       ClientStaff[]
  staffId     String
}

model InvoiceLine {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(1)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  title     String
  unitPrice Float
  unit      String
  subtotal  Float
  taxAmount Float
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId String
}

model Client {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  version   Int           @default(1)
  userId    String        @unique
  user      User          @relation(fields: [userId], references: [id])
  name      String
  email     String
  address   String
  estimates Estimate[]
  invoices  Invoice[]
  staff     ClientStaff[]
}

model ClientStaff {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  version   Int        @default(1)
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  balance   Float
  client    Client     @relation(fields: [clientId], references: [id])
  clientId  String     @unique
  estimates Estimate[]
  invoices  Invoice[]
}

model User {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  password     String
  Estimate     Estimate?
  EstimateLine EstimateLine?
  Invoice      Invoice?
  InvoiceLine  InvoiceLine?
  Client       Client?
  ClientStaff  ClientStaff?
  profile      UserProfile?
}

model UserProfile {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int      @default(1)
  firstName   String
  lastName    String
  address     String
  bankAccount String
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
}
